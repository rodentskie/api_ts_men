swagger: '2.0'
info:
  description: 'This is just my test documentation. Serve as a study for me. You can find out more about Swagger at [http://swagger.io](http://swagger.io)'
  version: 1.0.0
  title: Rodney TS MEN API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: rodentskie@gmail.com
  license:
    name: Cloudflare
    url: 'https://www.cloudflare.com/'
host: localhost
basePath: /api
tags:
  - name: People
    description: Basic info about people
    externalDocs:
      description: Find out more about people
      url: 'https://google.com'
  - name: Hobby
    description: Hobby of each person
schemes:
  - https
  - http
paths:
  /hobby:
    post:
      tags:
        - Hobby
      summary: insert a hobby to database
      description: ''
      operationId: addHobby # any unique?
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Hobby object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/HobbyPost'
      responses:
        '404':
          description: Missing required fields.
        '201':
          description: Inserted successfully.
    get:
      tags:
        - Hobby
      summary: Retrieve all hobbies
      description: ''
      operationId: getHobbies
      produces:
        - application/json
      responses:
        '200':
          description: successful request
          schema:
            type: array
            items:
              $ref: '#/definitions/HobbyGet'
  '/hobby/{id}':
    patch:
      tags:
        - Hobby
      summary: Update an existing hobby
      description: ''
      operationId: updateHobby
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: id of the hobby to be updated
          type: string
        - in: body
          name: body
          description: Hobby object that will be saved into the db.
          required: true
          schema:
            $ref: '#/definitions/HobbyPost'
      responses:
        '404':
          description: Required fields missing.
        '204':
          description: Updated Successfully.
    delete:
      tags:
        - Hobby
      summary: Delete an existing hobby
      description: ''
      operationId: deleteHobby
      produces:
        - string
      parameters:
        - in: path
          name: id
          required: true
          description: id of the hobby to be updated
          type: string
      responses:
        '200':
          description: Deleted Successfully.
  /people:
    post:
      tags:
        - People
      summary: insert a person to database
      description: ''
      operationId: addPerson # any unique?
      consumes:
        - application/json
      produces:
        - string
      parameters:
        - in: body
          name: body
          description: Person object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/PersonPost'
      responses:
        '404':
          description: Missing required fields.
        '201':
          description: Inserted successfully.
    get:
      tags:
        - People
      summary: Retrieve all people
      description: ''
      operationId: getPeople
      produces:
        - application/json
      responses:
        '200':
          description: successful request
          schema:
            type: array
            items:
              $ref: '#/definitions/PeopleGet'
  '/people/{id}':
    patch:
      tags:
        - People
      summary: Update an existing person
      description: ''
      operationId: updatePeople
      consumes:
        - application/json
      produces:
        - string
      parameters:
        - in: path
          name: id
          required: true
          description: id of the person to be updated
          type: string
        - in: body
          name: body
          description: Hobby object that will be saved into the db.
          required: true
          schema:
            $ref: '#/definitions/PersonPost'
      responses:
        '404':
          description: Required fields missing.
        '204':
          description: Updated Successfully.
    delete:
      tags:
        - People
      summary: Delete an existing person
      description: ''
      operationId: deletePeople
      produces:
        - string
      parameters:
        - in: path
          name: id
          required: true
          description: id of the hobby to be updated
          type: string
      responses:
        '200':
          description: Deleted Successfully.
  '/people/with-hobby/{id}':
    get:
      tags:
        - People
      summary: Retrieve a person with hobby
      description: ''
      operationId: getPeopleWithHobby
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: id of the person to be retrieve
          type: string
      responses:
        '200':
          description: successful request
          schema:
            type: array
            items:
              $ref: '#/definitions/PeopleGetHobby'
  '/people/hobby/{id}':
    patch:
      tags:
        - People
      summary: Update person's hobby
      description: ''
      operationId: updatePeopleHobby
      consumes:
        - application/json
      produces:
        - string
      parameters:
        - in: path
          name: id
          required: true
          description: id of the person to be updated
          type: string
        - in: body
          name: body
          description: Array of hobby _id
          required: true
          schema:
            $ref: '#/definitions/PersonPatchHobby'
      responses:
        '404':
          description: Required fields missing.
        '204':
          description: Updated Successfully.
definitions:
  HobbyPost:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: Eating
  HobbyGet:
    type: object
    properties:
      _id:
        type: string
        example: '60e2aa19b2441802c07f312d'
      name:
        type: string
        example: Eating
  PersonPost:
    type: object
    required:
      - firstName
      - lastName
      - age
    properties:
      firstName:
        type: string
        example: Rodney
      lastName:
        type: string
        example: Lingganay
      age:
        type: integer
        example: 26
  PeopleGet:
    type: object
    properties:
      _id:
        type: string
        example: '60e2aa19b2441802c07f312d'
      firstName:
        type: string
        example: Rodney
      lastName:
        type: string
        example: Lingganay
      age:
        type: integer
        example: 26
      hobbies:
        type: string
        example: ["60e2aa19b2441802c07f312d","60e2aa19b2441802c07f313s"]
  PersonPatchHobby:
    type: object
    properties:
      hobbies:
        type: string
        example: ["60e2aa19b2441802c07f312d","60e2aa19b2441802c07f313s"]
  PeopleGetHobby:
    type: object
    properties:
      _id:
        type: string
        example: '60e2aa19b2441802c07f312d'
      firstName:
        type: string
        example: Rodney
      lastName:
        type: string
        example: Lingganay
      age:
        type: integer
        example: 26
      hobbies:
        type: "array"
        items:
            $ref: "#/definitions/HobbyGet"
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
  